*****************************STEPS THAT WE NEED TO DO*********************************************
*****************************1.- CREATING THE STRUCTURE***********************************************
* Create a folder for the BackEnd
* Create the package.json with npm init -y command, whitin BackEnd folder 
* Create .env file
* Create src (source) folder
* Whithin src folder we are going to create
    *   index.js 
    *   app.js
    *   database.js
    *   routes folder 
    *   models folder 
    *   controller folder 
*****************************2.- INSTALLING DEPENDENCES************************************************
npm i express mongoose dotenv cors
npm i nodemon -D
*****************************3.- CONFIGURATION PORT IN APP JS ****************************************
*****************************4.- WE GET THE CONFIGURATION IN INDEX.JS FROM APP.JS AND WE LAUNCHED******
*****************************5.- WE ARE GOING TO CONECT THE SERVER WITH THE DB IN database.js *********
*****************************6.- WE NEED TO MAKE OUR MIDDLEWARES ***************************************
*****************************7.- WE NEED TO MAKE OUR ROUTES ********************************************
*****************************8.- WE NEED TO CREATE OUR SCHEMAS AND MODELS*******************************
*****************************9.- WE NEED TO CREATE A CONTROLLER*****************************************
*****************************10.- WE NEED TO ADD OUR FUNCTIONS FORM CONTROLLER TO USER.JS***************
*****************************11.- TEST YOUR ROUTES WITH A SOFTWARE LIKE POSTMAN/INSOMNIA

*****************************************FRONTEND STEPS****************************************************
************************1.-CREATE THE FOLDER AND INSTALL DEPENDENCES npx create-react-app frontend*********
************************2.- CREATE THE COMPONENTS *********************************************************
************************3.- INSTALL REACT ROUTER DOM FOR DO THE NAVBAR*************************************
    * npm i react-router-dom
************************4.- IMPORT THE COMPONENTS *********************************************************
************************5.- CREATE A NAVBAR WITH LINKS NOT ANCHORS*****************************************
************************6.- CREATE POST *******************************************************************
************************7.- I INSTALLED AXIOS FOR REQUESTS ************************************************
    *npm i axios
************************8.- CREATE GET ********************************************************************
************************9.- CREATE DELETE *****************************************************************
***********************10.- CREATE UPDATE *****************************************************************
***********************************************************************************************************
-------------------------------------------------------------------------------------------------------
package.json whitin this file we have the dependences and modules that we need for our project
.env This file will help us to create the  enviroments variables
src folder In this folder we are going to create the main structure of the project
index.js we are going to create the boot of our server
app.js we are going to set the settings of our server here
database.js Here we are going to create and define the link to connect the server with the database
routes folder Here we are going to create routes for the crud querys
models folder We are going to create the models to access to database and our schemas
controller folder Here is the logic or the functions that allow you answer to the querys
express is a web application framework for the Node.js script,
It will allow us to write code for the server in a simple way and provides us with libraries such as router
mongoose it's a mongoDB module it allow to create the link to our server and our database, it also allow to create
schemas
dontenv allow you make the configuration for our enviroments variables and, of course, use that configuration in 
our project
cors allow to have a connection between our backend server and our frontEnd server
nodemon It's to usefull for automatic changes in the backend, beacuse when we make a change this dependence
restart the server for see the changes
middlewares: these are important because before to execute a route it will validate a request or configuration
req in a function has a json with the information that the user wrote.
Axios allows us to make requests or calls to the content of an HTTP link